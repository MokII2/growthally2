
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, roleName) {
      let userData = getUserData(userId);
      return isAuthenticated() && userData != null && userData.role == roleName;
    }

    function isParent(userId) {
      return isUserRole(userId, 'parent');
    }

    function isChild(userId) {
      let userData = getUserData(userId);
      return isUserRole(userId, 'child') && userData != null && userData.parentId != null;
    }

    function getChildsParentId(childUserId) {
      let userData = getUserData(childUserId);
      return userData.parentId;
    }

    // USERS collection (Parent profiles, and Child main profiles)
    match /users/{userId} {
      // Parent Profile Creation
      allow create: if isAuthenticated() &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.role == 'parent' &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female') &&
                       request.resource.data.age is number && request.resource.data.age >= 18 &&
                       request.resource.data.phone is string && request.resource.data.phone.size() > 0 &&
                       !exists(/databases/$(database)/documents/users/$(userId));

      // Child Profile Creation (by parent)
      allow create: if isAuthenticated() && isParent(request.auth.uid) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.role == 'child' &&
                       request.resource.data.parentId == request.auth.uid &&
                       request.resource.data.email is string && request.resource.data.email.matches("^[a-zA-Z0-9._-]+@growthally\\.com$") &&
                       request.resource.data.displayName is string && request.resource.data.displayName.size() > 0 &&
                       request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female') &&
                       request.resource.data.age is number && request.resource.data.age >= 1 && request.resource.data.age <= 18 &&
                       request.resource.data.hobbies is list && request.resource.data.hobbies.size() >= 1 &&
                       request.resource.data.points == 0 &&
                       !exists(/databases/$(database)/documents/users/$(userId));

      allow read: if isAuthenticated() && request.auth.uid == userId;

      allow update: if (
                    // Parent can update their own profile fields
                    (isAuthenticated() && request.auth.uid == userId && isParent(request.auth.uid) &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.email == resource.data.email
                       // Add other specific updatable fields for parent here, ensuring they don't change critical data like uid, role
                    ) ||
                    // Child can update their own profile fields
                    (isAuthenticated() && request.auth.uid == userId && isChild(request.auth.uid) &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.parentId == resource.data.parentId &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.points == resource.data.points // Child cannot change their own points
                       // Add other specific updatable fields for child here
                    ) ||
                    // Parent can update ONLY the points of their child
                    (isAuthenticated() && isParent(request.auth.uid) &&
                       isChild(userId) && getChildsParentId(userId) == request.auth.uid && // Target is their child
                       request.resource.data.keys().hasOnly(['points']) && // Parent is ONLY sending 'points'
                       request.resource.data.points is number // New points value is a number
                    )
                  );

      allow delete: if isAuthenticated() &&
                       isParent(request.auth.uid) &&
                       resource.data.role == 'child' &&
                       resource.data.parentId == request.auth.uid;
    }

    // CHILDREN subcollection (under parent's user document)
    match /users/{parentDocId}/children/{childRecordId} {
      allow create: if isParent(request.auth.uid) && request.auth.uid == parentDocId &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.email is string && request.resource.data.email.matches("^[a-zA-Z0-9._-]+@growthally\\.com$") &&
                       request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female') &&
                       request.resource.data.age is number && request.resource.data.age >= 1 && request.resource.data.age <= 18 &&
                       request.resource.data.hobbies is list && request.resource.data.hobbies.size() >= 1 &&
                       request.resource.data.points == 0 &&
                       request.resource.data.authUid is string &&
                       (request.resource.data.initialPassword is string || request.resource.data.initialPassword == null);

      allow read, delete: if isParent(request.auth.uid) && request.auth.uid == parentDocId;

      allow update: if isParent(request.auth.uid) && request.auth.uid == parentDocId &&
                       // Parent can update their child's record in the subcollection.
                       // If only points are being updated:
                       (request.resource.data.keys().hasOnly(['points']) &&
                        request.resource.data.points is number);
                       // Add other scenarios for updating child subcollection records here if needed,
                       // ensuring immutable fields like authUid, email are not changed after creation.
                       // Example: (request.resource.data.keys().hasAny(['name', 'age', 'hobbies', 'points']) && ... )
    }

    // TASKS collection
    match /tasks/{taskId} {
      allow create: if isParent(request.auth.uid) &&
                       request.auth.uid == request.resource.data.parentId &&
                       request.resource.data.description is string && request.resource.data.description.size() > 0 &&
                       request.resource.data.points is number && request.resource.data.points > 0 &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.assignedToUids is list && request.resource.data.assignedToUids.size() >= 1 &&
                       request.resource.data.assignedToNames is list && request.resource.data.assignedToNames.size() >= 1 &&
                       (request.resource.data.assignedToUids.size() == 0 ||
                        (isChild(request.resource.data.assignedToUids[0]) &&
                         getChildsParentId(request.resource.data.assignedToUids[0]) == request.auth.uid
                        )
                       );

      allow read: if (isParent(request.auth.uid) && request.auth.uid == resource.data.parentId) ||
                     (isChild(request.auth.uid) && request.auth.uid in resource.data.assignedToUids &&
                      getChildsParentId(request.auth.uid) == resource.data.parentId);

      allow update: if (
                    // Parent can update task
                    (isParent(request.auth.uid) && request.auth.uid == resource.data.parentId &&
                        request.resource.data.parentId == resource.data.parentId && // parentId cannot change
                        request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot change
                        (
                         // Scenario 1: Verifying a completed task
                         (resource.data.status == 'completed' && request.resource.data.status == 'verified' &&
                          request.resource.data.keys().hasOnly(['status']) // Only status is changed to verified
                         ) ||
                         // Scenario 2: Parent editing a pending task (e.g., description, points)
                         (resource.data.status == 'pending' && request.resource.data.status == 'pending' &&
                          // Allow updates to description, points, assignedToUids, assignedToNames for pending tasks
                          request.resource.data.keys().hasOnly(['description', 'points', 'assignedToUids', 'assignedToNames', 'status', 'parentId', 'createdAt']) &&
                          request.resource.data.description is string && request.resource.data.description.size() > 0 &&
                          request.resource.data.points is number && request.resource.data.points > 0 &&
                          request.resource.data.assignedToUids is list && request.resource.data.assignedToUids.size() >= 1 &&
                          request.resource.data.assignedToNames is list && request.resource.data.assignedToNames.size() >= 1
                         )
                        )
                     ) ||
                    // Assigned Child can update status from 'pending' to 'completed'
                    (isChild(request.auth.uid) && request.auth.uid in resource.data.assignedToUids &&
                     getChildsParentId(request.auth.uid) == resource.data.parentId && // Task from their parent
                     resource.data.status == 'pending' && request.resource.data.status == 'completed' &&
                     request.resource.data.keys().hasOnly(['status']) // Child can ONLY update status
                    )
                  );


      allow delete: if isParent(request.auth.uid) && request.auth.uid == resource.data.parentId;
    }

    // REWARDS collection
    match /rewards/{rewardId} {
      allow create: if isParent(request.auth.uid) &&
                       request.auth.uid == request.resource.data.parentId &&
                       request.resource.data.description is string && request.resource.data.description.size() > 0 &&
                       request.resource.data.pointsCost is number && request.resource.data.pointsCost > 0 &&
                       request.resource.data.createdAt == request.time;

      allow read: if (isParent(request.auth.uid) && request.auth.uid == resource.data.parentId) ||
                     (isChild(request.auth.uid) &&
                      getChildsParentId(request.auth.uid) == resource.data.parentId);

      allow update: if isParent(request.auth.uid) && request.auth.uid == resource.data.parentId &&
                       request.resource.data.parentId == resource.data.parentId && // parentId cannot change
                       request.resource.data.createdAt == resource.data.createdAt; // createdAt cannot change
                       // Add other updatable fields for rewards by parent here if needed

      allow delete: if isParent(request.auth.uid) && request.auth.uid == resource.data.parentId;
    }
  }
}

    