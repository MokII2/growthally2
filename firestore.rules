
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, roleName) {
      let userData = getUserData(userId);
      return isAuthenticated() && userData != null && userData.role == roleName;
    }

    function isParent(userId) {
      return isUserRole(userId, 'parent');
    }

    function isChild(userId) {
      let userData = getUserData(userId);
      return isUserRole(userId, 'child') && userData != null && userData.parentId != null;
    }

    function getChildsParentId(childUserId) {
      let userData = getUserData(childUserId);
      return userData.parentId;
    }

    // USERS collection (Parent profiles, and Child main profiles)
    match /users/{userId} {
      // Parent Profile Creation
      allow create: if isAuthenticated() &&
                       request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.role == 'parent' &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female') && // Adjusted per previous request
                       request.resource.data.age is number && request.resource.data.age >= 18 &&
                       request.resource.data.phone is string && request.resource.data.phone.size() > 0 &&
                       !exists(/databases/$(database)/documents/users/$(userId));

      // Child Profile Creation (by parent)
      allow create: if isAuthenticated() && isParent(request.auth.uid) &&
                       request.resource.data.uid == userId && // userId is the child's new auth UID
                       request.resource.data.role == 'child' &&
                       request.resource.data.parentId == request.auth.uid &&
                       request.resource.data.email is string && request.resource.data.email.matches("^[a-zA-Z0-9._-]+@growthally\\.com$") &&
                       request.resource.data.displayName is string && request.resource.data.displayName.size() > 0 &&
                       request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female') &&
                       request.resource.data.age is number && request.resource.data.age >= 1 && request.resource.data.age <= 18 &&
                       request.resource.data.hobbies is list && request.resource.data.hobbies.size() >= 1 &&
                       request.resource.data.points == 0 &&
                       !exists(/databases/$(database)/documents/users/$(userId));

      allow read: if isAuthenticated() && request.auth.uid == userId;

      allow update: if (
                      // Parent can update THEIR OWN profile (excluding role, uid, email for simplicity here)
                      (isAuthenticated() && request.auth.uid == userId && isParent(request.auth.uid) &&
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.role == resource.data.role &&
                        request.resource.data.email == resource.data.email &&
                        // Allow specific fields to be updated by parent for themselves
                        (!('name' in request.resource.data.keys()) || request.resource.data.name is string && request.resource.data.name.size() > 0) &&
                        (!('gender' in request.resource.data.keys()) || (request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female'))) &&
                        (!('age' in request.resource.data.keys()) || (request.resource.data.age is number && request.resource.data.age >= 18) ) &&
                        (!('phone' in request.resource.data.keys()) || request.resource.data.phone is string && request.resource.data.phone.size() > 0) &&
                        // Only these fields can be in the request for parent self-update (plus immutable ones already checked)
                        request.resource.data.keys().subsetOf(['uid', 'role', 'email', 'name', 'gender', 'age', 'phone', 'points', 'parentId', 'displayName', 'hobbies'])
                      ) ||
                      // Child can update THEIR OWN profile (excluding role, uid, parentId, points, email for simplicity)
                      (isAuthenticated() && request.auth.uid == userId && isChild(request.auth.uid) &&
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.role == resource.data.role &&
                        request.resource.data.parentId == resource.data.parentId &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.points == resource.data.points && // Child cannot change their own points
                        // Allow specific fields to be updated by child for themselves
                        (!('displayName' in request.resource.data.keys()) || (request.resource.data.displayName is string && request.resource.data.displayName.size() > 0)) &&
                        (!('hobbies' in request.resource.data.keys()) || request.resource.data.hobbies is list) &&
                        // Only these fields can be in the request for child self-update
                        request.resource.data.keys().subsetOf(['uid', 'role', 'parentId', 'email', 'points', 'displayName', 'hobbies', 'name', 'gender', 'age', 'phone'])
                      ) ||
                      // Parent can update ONLY the points of their child
                      (isAuthenticated() && isParent(request.auth.uid) &&
                        isChild(userId) && getChildsParentId(userId) == request.auth.uid && // Target is their child
                        request.resource.data.keys().hasOnly(['points']) && // Parent is ONLY sending 'points'
                        request.resource.data.points is number // New points value is a number
                      )
                    );

      allow delete: if isAuthenticated() &&
                       isParent(request.auth.uid) &&
                       resource.data.role == 'child' &&
                       resource.data.parentId == request.auth.uid;
    }

    // CHILDREN subcollection (under parent's user document)
    match /users/{parentDocId}/children/{childRecordId} {
      allow create: if isParent(request.auth.uid) && request.auth.uid == parentDocId &&
                       request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                       request.resource.data.email is string && request.resource.data.email.matches("^[a-zA-Z0-9._-]+@growthally\\.com$") &&
                       request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female') &&
                       request.resource.data.age is number && request.resource.data.age >= 1 && request.resource.data.age <= 18 &&
                       request.resource.data.hobbies is list && request.resource.data.hobbies.size() >= 1 &&
                       request.resource.data.points == 0 &&
                       request.resource.data.authUid is string &&
                       (request.resource.data.initialPassword is string || request.resource.data.initialPassword == null);

      allow read, delete: if isParent(request.auth.uid) && request.auth.uid == parentDocId;

      // Parent can update child's record in their subcollection
      allow update: if isParent(request.auth.uid) && request.auth.uid == parentDocId &&
                       // Ensure immutable fields are not changed if sent
                       request.resource.data.get('authUid', resource.data.authUid) == resource.data.authUid &&
                       request.resource.data.get('email', resource.data.email) == resource.data.email &&
                       request.resource.data.get('createdAt', resource.data.createdAt) == resource.data.createdAt &&
                       // Allow updates to specific fields
                       (!('name' in request.resource.data.keys()) || (request.resource.data.name is string && request.resource.data.name.size() > 0)) &&
                       (!('points' in request.resource.data.keys()) || request.resource.data.points is number) &&
                       (!('gender' in request.resource.data.keys()) || (request.resource.data.gender is string && (request.resource.data.gender == 'male' || request.resource.data.gender == 'female'))) &&
                       (!('age' in request.resource.data.keys()) || (request.resource.data.age is number && request.resource.data.age >= 1 && request.resource.data.age <= 18)) &&
                       (!('hobbies' in request.resource.data.keys()) || request.resource.data.hobbies is list) &&
                       (!('initialPassword' in request.resource.data.keys()) || request.resource.data.initialPassword is string || request.resource.data.initialPassword == null) &&
                       // All keys in the request must be from an allowed set
                       request.resource.data.keys().subsetOf(['name', 'points', 'gender', 'age', 'hobbies', 'initialPassword', 'authUid', 'email', 'createdAt']) &&
                       request.resource.data.keys().size() > 0; // Must be updating at least one field
    }

    // TASKS collection
    match /tasks/{taskId} {
      allow create: if isParent(request.auth.uid) &&
                       request.auth.uid == request.resource.data.parentId &&
                       request.resource.data.description is string && request.resource.data.description.size() > 0 &&
                       request.resource.data.points is number && request.resource.data.points > 0 &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.assignedToUids is list && request.resource.data.assignedToUids.size() >= 1 &&
                       request.resource.data.assignedToNames is list && request.resource.data.assignedToNames.size() >= 1 &&
                       (request.resource.data.assignedToUids.size() == 0 ||
                        (isChild(request.resource.data.assignedToUids[0]) &&
                         getChildsParentId(request.resource.data.assignedToUids[0]) == request.auth.uid
                        )
                       );

      allow read: if (isParent(request.auth.uid) && request.auth.uid == resource.data.parentId) ||
                     (isChild(request.auth.uid) && request.auth.uid in resource.data.assignedToUids &&
                      getChildsParentId(request.auth.uid) == resource.data.parentId);

      allow update: if (
                    // Parent can update task
                    (isParent(request.auth.uid) && request.auth.uid == resource.data.parentId && // Parent owns the task
                        // Ensure immutable fields (parentId, createdAt) are not changed if they are part of the request.
                        // If not in request, implies no change is attempted.
                        (!('parentId' in request.resource.data.keys()) || request.resource.data.parentId == resource.data.parentId) &&
                        (!('createdAt' in request.resource.data.keys()) || request.resource.data.createdAt == resource.data.createdAt) &&
                        ( // Parent update scenarios
                            // Scenario 1: Verifying a completed task
                            (resource.data.status == 'completed' && request.resource.data.status == 'verified' &&
                             request.resource.data.keys().hasOnly(['status']) // ONLY status is being sent for verification
                            ) ||
                            // Scenario 2: Parent editing a PENDING task
                            (resource.data.status == 'pending' &&
                             // Status, if sent by parent during edit, must remain 'pending' (or be absent from request)
                             (!('status' in request.resource.data.keys()) || request.resource.data.status == 'pending') &&
                             // Validate other fields if they are being updated (allowing partial updates)
                             (!('description' in request.resource.data.keys()) || (request.resource.data.description is string && request.resource.data.description.size() > 0)) &&
                             (!('points' in request.resource.data.keys()) || (request.resource.data.points is number && request.resource.data.points > 0)) &&
                             (!('assignedToUids' in request.resource.data.keys()) || (request.resource.data.assignedToUids is list && request.resource.data.assignedToUids.size() >= 1)) &&
                             (!('assignedToNames' in request.resource.data.keys()) || (request.resource.data.assignedToNames is list && request.resource.data.assignedToNames.size() >= 1)) &&
                             // All keys in the request must be from an allowed set for pending task edits.
                             // 'parentId' and 'createdAt' are included here; their immutability is checked above.
                             request.resource.data.keys().subsetOf(['description', 'points', 'assignedToUids', 'assignedToNames', 'status', 'parentId', 'createdAt']) &&
                             request.resource.data.keys().size() > 0 // Ensure at least one field is being updated
                            )
                        )
                     ) ||
                    // Assigned Child can update status from 'pending' to 'completed'
                    (isChild(request.auth.uid) && request.auth.uid in resource.data.assignedToUids &&
                     getChildsParentId(request.auth.uid) == resource.data.parentId && // Task from their parent
                     resource.data.status == 'pending' && request.resource.data.status == 'completed' &&
                     request.resource.data.keys().hasOnly(['status']) // Child can ONLY update status
                    )
                  );

      allow delete: if isParent(request.auth.uid) && request.auth.uid == resource.data.parentId;
    }

    // REWARDS collection
    match /rewards/{rewardId} {
      allow create: if isParent(request.auth.uid) &&
                       request.auth.uid == request.resource.data.parentId &&
                       request.resource.data.description is string && request.resource.data.description.size() > 0 &&
                       request.resource.data.pointsCost is number && request.resource.data.pointsCost > 0 &&
                       request.resource.data.createdAt == request.time;

      allow read: if (isParent(request.auth.uid) && request.auth.uid == resource.data.parentId) ||
                     (isChild(request.auth.uid) &&
                      getChildsParentId(request.auth.uid) == resource.data.parentId);

      allow update: if isParent(request.auth.uid) && request.auth.uid == resource.data.parentId &&
                       // Ensure immutable fields are not changed if sent
                       request.resource.data.get('parentId', resource.data.parentId) == resource.data.parentId &&
                       request.resource.data.get('createdAt', resource.data.createdAt) == resource.data.createdAt &&
                       // Allow updates to specific fields
                       (!('description' in request.resource.data.keys()) || (request.resource.data.description is string && request.resource.data.description.size() > 0)) &&
                       (!('pointsCost' in request.resource.data.keys()) || (request.resource.data.pointsCost is number && request.resource.data.pointsCost > 0)) &&
                       // All keys in the request must be from an allowed set
                       request.resource.data.keys().subsetOf(['description', 'pointsCost', 'parentId', 'createdAt']) &&
                       request.resource.data.keys().size() > 0; // Must be updating at least one field


      allow delete: if isParent(request.auth.uid) && request.auth.uid == resource.data.parentId;
    }
  }
}

    